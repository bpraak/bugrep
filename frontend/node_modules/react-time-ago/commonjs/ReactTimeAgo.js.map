{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["ReactTimeAgo","MINUTE","HOUR","DAY","MONTH","YEAR","INTERVALS","interval","threshold","SET_TIMEOUT_MAX_DELAY","date","timeStyle","tooltip","container","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","rest","preferredLocales","concat","getDefaultLocale","timeAgo","verboseDateFormatter","window","unusedState","setUnusedState","forceUpdate","autoUpdateTimer","getNextAutoUpdateDelay","time","now","Date","diff","Math","abs","_interval","min","scheduleNextTick","current","setTimeout","getVerboseDate","input","convertToDate","isMounted","clearTimeout","verboseDate","undefined","timeElement","toISOString","format","createElement","propTypes","oneOfType","instanceOf","number","isRequired","string","arrayOf","bool","func","object","defaultProps","weekday","day","month","year","hour","minute","second","constructor","Error"],"mappings":"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","file":"ReactTimeAgo.js","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport JavascriptTimeAgo from 'javascript-time-ago'\r\nimport { style } from 'javascript-time-ago/prop-types'\r\n\r\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter'\r\nimport { getDate, getTime, isMockedDate } from './helpers/date'\r\n\r\nconst MINUTE = 60 * 1000\r\nconst HOUR = 60 * MINUTE\r\nconst DAY = 24 * HOUR\r\nconst MONTH = 30 * DAY\r\nconst YEAR = 365 * DAY\r\n\r\n// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n// \"Smart\" autoupdate intervals should be moved to `javascript-time-ago`'s grading scale.\r\nconst INTERVALS = [{\r\n\tinterval: MINUTE\r\n}, {\r\n\tthreshold: HOUR,\r\n\tinterval: 10 * MINUTE\r\n}, {\r\n\tthreshold: 12 * HOUR,\r\n\tinterval: 20 * MINUTE\r\n}, {\r\n\tthreshold: DAY,\r\n\tinterval: 3 * HOUR\r\n}, {\r\n\tthreshold: 7 * DAY,\r\n\tinterval: 6 * HOUR\r\n}, {\r\n\tthreshold: MONTH,\r\n\tinterval: 5 * DAY\r\n}, {\r\n\tthreshold: 3 * MONTH,\r\n\tinterval: 10 * DAY\r\n}, {\r\n\tthreshold: YEAR,\r\n\tinterval: MONTH\r\n}]\r\n\r\n// `setTimeout()` would enter an infinite cycle when interval is a `MONTH`.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_DELAY = 2147483647\r\n\r\nexport default function ReactTimeAgo({\r\n\tdate,\r\n\ttimeStyle,\r\n\ttooltip,\r\n\tcontainer,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\t...rest\r\n}) {\r\n\t// Composes a list of preferred locales\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(JavascriptTimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn new JavascriptTimeAgo(preferredLocales)\r\n\t}, [\r\n\t\tpreferredLocales\r\n\t])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\treturn createVerboseDateFormatter(preferredLocales, verboseDateFormat)\r\n\t\t}\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\tconst [unusedState, setUnusedState] = useState()\r\n\tconst forceUpdate = useCallback(() => setUnusedState({}), [setUnusedState])\r\n\r\n\tconst autoUpdateTimer = useRef()\r\n\r\n\tconst getNextAutoUpdateDelay = useCallback(() => {\r\n\t\t// \"Smart\" autoupdate intervals are only used for standard time styles.\r\n\t\tif (typeof timeStyle === 'object') {\r\n\t\t\treturn updateInterval\r\n\t\t}\r\n\t\tconst time = getTime(date)\r\n\t\tconst now = Date.now()\r\n\t\tconst diff = Math.abs(now - time)\r\n\t\tlet _interval\r\n\t\tfor (const { interval, threshold } of INTERVALS) {\r\n\t\t\tif (threshold && diff < threshold) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\t_interval = interval\r\n\t\t}\r\n\t\treturn Math.min(_interval, SET_TIMEOUT_MAX_DELAY)\r\n\t}, [\r\n\t\tdate, \r\n\t\ttimeStyle, \r\n\t\tupdateInterval\r\n\t])\r\n\r\n\tconst scheduleNextTick = useCallback(() => {\r\n\t\t// Register for the relative time autoupdate as the time goes by.\r\n\t\tautoUpdateTimer.current = setTimeout(() => {\r\n\t\t\tforceUpdate()\r\n\t\t\tscheduleNextTick()\r\n\t\t}, getNextAutoUpdateDelay())\r\n\t}, [\r\n\t\tforceUpdate,\r\n\t\tgetNextAutoUpdateDelay\r\n\t])\r\n\r\n\t// Verbose date string.\r\n\t// Is used as a tooltip text.\r\n\t//\r\n\t// E.g. \"Sunday, May 18th, 2012, 18:45\"\r\n\t//\r\n\tconst getVerboseDate = useCallback((input) => {\r\n\t\tconst date = convertToDate(input)\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(date)\r\n\t\t}\r\n\t\treturn verboseDateFormatter(date)\r\n\t}, [\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst isMounted = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tisMounted.current = true\r\n\t\t// If time label autoupdates are enabled.\r\n\t\tif (tick) {\r\n\t\t\tscheduleNextTick()\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(autoUpdateTimer.current)\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = getDate(date)\r\n\r\n\t// Format verbose date for the tooltip.\r\n\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\tconst verboseDate = typeof window === 'undefined' ? undefined : getVerboseDate(date)\r\n\r\n\tconst timeElement = (\r\n\t\t<time\r\n\t\t\tdateTime={date.toISOString()}\r\n\t\t\ttitle={tooltip ? verboseDate : undefined} \r\n\t\t\t{...rest}>\r\n\t\t\t{timeAgo.format(date, timeStyle)}\r\n\t\t</time>\r\n\t)\r\n\r\n\tif (container) {\r\n\t\treturn React.createElement(\r\n\t\t\tcontainer,\r\n\t\t\t{\r\n\t\t\t\tverboseDate,\r\n\t\t\t\t...rest\r\n\t\t\t},\r\n\t\t\ttimeElement\r\n\t\t)\r\n\t}\r\n\r\n\treturn timeElement\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Preferred locales (ordered).\r\n\t// Will choose the first suitable locale from this list.\r\n\t// (the one that has been initialized)\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// Date/time formatting style.\r\n\t// E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\r\n\ttimeStyle: style,\r\n\r\n\t// Whether HTML `tooltip` attribute should be set\r\n\t// to verbosely formatted date (is `true` by default).\r\n\t// Set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// An optional function returning what will be output in the HTML `title` tooltip attribute.\r\n\t// (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\r\n\t// Is used when `formatVerboseDate` is not specified.\r\n\t// By default outputs a verbose date.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// How often to update all `<ReactTimeAgo/>` elements on a page.\r\n\t// (is once in a minute by default)\r\n\t// This setting is only used for \"custom\" `timeStyle`s.\r\n\t// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n\t// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n\tupdateInterval: PropTypes.number,\r\n\r\n\t// Set to `false` to disable automatic refresh of\r\n\t// `<ReactTimeAgo/>` elements on a page as time goes by.\r\n\t// (is `true` by default)\r\n\ttick: PropTypes.bool,\r\n\r\n\t// React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t//\r\n\t// ```js\r\n\t// import React from 'react'\r\n\t// import ReactTimeAgo from 'react-time-ago'\r\n\t// import { Tooltip } from 'react-responsive-ui'\r\n\t// \r\n\t// export default function TimeAgo(props) {\r\n\t//   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\r\n\t// }\r\n\t// \r\n\t// const Container = ({ verboseDate, children }) => (\r\n\t//   <Tooltip content={verboseDate}>\r\n\t//     {children}\r\n\t//   </Tooltip>\r\n\t// )\r\n\t// ```\r\n\t//\r\n\tcontainer: PropTypes.func\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Show verbose date `title` tooltip on mouse over.\r\n\ttooltip: true,\r\n\r\n\t// Thursday, December 20, 2012, 7:00:00 AM GMT+4\r\n\tverboseDateFormat: {\r\n\t\tweekday      : 'long',\r\n\t\tday          : 'numeric',\r\n\t\tmonth        : 'long',\r\n\t\tyear         : 'numeric',\r\n\t\thour         : 'numeric',\r\n\t\tminute       : '2-digit',\r\n\t\tsecond       : '2-digit',\r\n\t\t// timeZoneName : 'short'\r\n\t},\r\n\r\n\t// Updates once a minute\r\n\tupdateInterval: MINUTE,\r\n\r\n\t// Refreshes time in a web browser by default\r\n\ttick: true\r\n}\r\n\r\n// Converts argument into a `Date`.\r\nfunction convertToDate(input) {\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input\r\n\t}\r\n\tif (typeof input === 'number') {\r\n\t\treturn new Date(input)\r\n\t}\r\n\tthrow new Error(`Unsupported react-time-ago input: ${typeof input}, ${input}`)\r\n}"]}