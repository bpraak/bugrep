{"ast":null,"code":"var _jsxFileName = \"/home/gauransh/Documents/assignments/prakhar/bugrep/frontend/src/components/comments/CommentList.js\";\nimport React from 'react';\nimport Loader from '../../common/Loader';\nimport WebSocketInstance from '../../websocket';\nimport { List } from 'antd';\nimport AddComment from './AddComment';\nimport { connect } from 'react-redux';\nimport { getUsers } from '../../store/actions/userActions';\nimport CommentDetail from './CommentDetail';\n\nclass CommentList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onLike = (id, status) => {\n      WebSocketInstance.likeComment(id, status);\n    };\n\n    this.state = {\n      comments: null,\n      isclick: false\n    };\n    this.waitForSocketConnection(() => {\n      WebSocketInstance.addCallbacks(this.setComments.bind(this), this.addComment.bind(this), this.likedComment.bind(this));\n      WebSocketInstance.fetchComments(this.props.bugId);\n    });\n  }\n\n  componentDidMount() {\n    this.props.getUsers();\n  }\n\n  waitForSocketConnection(callback) {\n    const component = this;\n    setTimeout(function () {\n      if (WebSocketInstance.state() === 1) {\n        console.log('Connection is secure');\n        callback();\n        return;\n      } else {\n        console.log('Waiting for socket connection...');\n        component.waitForSocketConnection(callback);\n      }\n    }, 100);\n  }\n\n  addComment(comment) {\n    this.setState({\n      comments: [comment, ...this.state.comments]\n    });\n  }\n\n  setComments(comments) {\n    this.setState({\n      comments: comments.reverse()\n    });\n  }\n\n  likedComment(comment) {\n    let comments = this.state.comments;\n    const index = comments.findIndex(element => element.id === comment.id);\n    comments[index] = comment;\n    this.setState({\n      comments\n    });\n  }\n\n  render() {\n    if (this.state.comments === null) {\n      return /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return this.props.users ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AddComment, {\n      bugId: this.props.bugId,\n      reply: 0,\n      rows: 4,\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      className: \"comment-list\",\n      header: `${Object.keys(this.state.comments).length} comments`,\n      itemLayout: \"horizontal\",\n      dataSource: this.state.comments,\n      renderItem: item => item.reply ? null : /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CommentDetail, {\n        reply: 1,\n        item: item,\n        user: this.props.user,\n        users: this.props.users,\n        onLike: this.onLike,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 33\n        }\n      }, this.state.comments.map(comment => {\n        if (item.id === comment.reply) {\n          return /*#__PURE__*/React.createElement(CommentDetail, {\n            reply: 0,\n            item: comment,\n            user: this.props.user,\n            users: this.props.users,\n            onLike: this.onLike,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 52\n            }\n          });\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    })) : null;\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  users: state.user.users,\n  user: state.auth.user\n});\n\nexport default connect(mapStateToProps, {\n  getUsers\n})(CommentList);","map":{"version":3,"sources":["/home/gauransh/Documents/assignments/prakhar/bugrep/frontend/src/components/comments/CommentList.js"],"names":["React","Loader","WebSocketInstance","List","AddComment","connect","getUsers","CommentDetail","CommentList","Component","constructor","props","onLike","id","status","likeComment","state","comments","isclick","waitForSocketConnection","addCallbacks","setComments","bind","addComment","likedComment","fetchComments","bugId","componentDidMount","callback","component","setTimeout","console","log","comment","setState","reverse","index","findIndex","element","render","users","Object","keys","length","item","reply","user","map","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Loader from '../../common/Loader';\nimport WebSocketInstance from '../../websocket';\nimport { List } from 'antd';\nimport AddComment from './AddComment';\nimport { connect } from 'react-redux';\nimport { getUsers } from '../../store/actions/userActions';\nimport CommentDetail from './CommentDetail';\n\n\n\nclass CommentList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: null,\n            isclick: false\n        }\n\n        this.waitForSocketConnection(() => {\n            WebSocketInstance.addCallbacks(\n                this.setComments.bind(this),\n                this.addComment.bind(this),\n                this.likedComment.bind(this)\n            );\n            WebSocketInstance.fetchComments(this.props.bugId);\n        })\n    }\n\n    componentDidMount() {\n        this.props.getUsers();\n    }\n\n    waitForSocketConnection(callback) {\n        const component = this;\n        setTimeout(\n            function() {\n                if(WebSocketInstance.state() === 1){\n                    console.log('Connection is secure')\n                    callback();\n                    return;\n                }\n                else {\n                    console.log('Waiting for socket connection...');\n                    component.waitForSocketConnection(callback)\n                }\n            }, 100\n        )\n    }\n\n    addComment(comment) {\n        this.setState({\n            comments: [comment, ...this.state.comments]\n        })\n    }\n\n    setComments(comments) {\n        this.setState({\n            comments: comments.reverse()\n        })\n    }\n\n    likedComment(comment) {\n        let comments = this.state.comments;\n        const index = comments.findIndex(element => element.id === comment.id);\n        comments[index] = comment;\n        this.setState({\n            comments\n        })\n    }\n\n    onLike = (id, status) => {\n        WebSocketInstance.likeComment(id, status)\n    }\n\n    render() {\n        if (this.state.comments === null) {\n            return <Loader />\n        }\n        return this.props.users?\n             (\n                <>\n                    <AddComment bugId={this.props.bugId} reply={0} rows={4} visible={true} />\n                    <List\n                        className=\"comment-list\"\n                        header={`${Object.keys(this.state.comments).length} comments`}\n                        itemLayout=\"horizontal\"\n                        dataSource={this.state.comments}\n                        renderItem={item => (\n                            item.reply?null:\n                            <li>\n                                <CommentDetail reply={1} item={item} user={this.props.user} users={this.props.users} onLike={this.onLike}>\n                                    {/* <AddComment bugId={this.props.bugId} reply={item.id} rows={1} /> */}\n                                    {this.state.comments.map((comment) => {\n                                        if(item.id === comment.reply){\n                                            return <CommentDetail reply={0} item={comment} user={this.props.user} users={this.props.users} onLike={this.onLike} />\n                                        }\n                                    })}\n                                </CommentDetail>\n                            </li>\n                        )}\n                    />\n                </>\n            )\n        : null\n    }\n}\n\nconst mapStateToProps = state => ({\n    users: state.user.users,\n    user: state.auth.user\n})\n\nexport default connect(mapStateToProps, {getUsers})(CommentList);\n"]},"metadata":{},"sourceType":"module"}