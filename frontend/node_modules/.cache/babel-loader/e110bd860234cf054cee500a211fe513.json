{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport JavascriptTimeAgo from 'javascript-time-ago';\nimport { style } from 'javascript-time-ago/prop-types';\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter';\nimport { getDate, getTime, isMockedDate } from './helpers/date';\nvar MINUTE = 60 * 1000;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nvar MONTH = 30 * DAY;\nvar YEAR = 365 * DAY; // For standard `timeStyle`s, \"smart\" autoupdate interval is used:\n// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\n// \"Smart\" autoupdate intervals should be moved to `javascript-time-ago`'s grading scale.\n\nvar INTERVALS = [{\n  interval: MINUTE\n}, {\n  threshold: HOUR,\n  interval: 10 * MINUTE\n}, {\n  threshold: 12 * HOUR,\n  interval: 20 * MINUTE\n}, {\n  threshold: DAY,\n  interval: 3 * HOUR\n}, {\n  threshold: 7 * DAY,\n  interval: 6 * HOUR\n}, {\n  threshold: MONTH,\n  interval: 5 * DAY\n}, {\n  threshold: 3 * MONTH,\n  interval: 10 * DAY\n}, {\n  threshold: YEAR,\n  interval: MONTH\n}]; // `setTimeout()` would enter an infinite cycle when interval is a `MONTH`.\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\n\nvar SET_TIMEOUT_MAX_DELAY = 2147483647;\nexport default function ReactTimeAgo(_ref) {\n  var date = _ref.date,\n      timeStyle = _ref.timeStyle,\n      tooltip = _ref.tooltip,\n      container = _ref.container,\n      locale = _ref.locale,\n      locales = _ref.locales,\n      formatVerboseDate = _ref.formatVerboseDate,\n      verboseDateFormat = _ref.verboseDateFormat,\n      updateInterval = _ref.updateInterval,\n      tick = _ref.tick,\n      rest = _objectWithoutProperties(_ref, ['date', 'timeStyle', 'tooltip', 'container', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick']); // Composes a list of preferred locales\n\n\n  var preferredLocales = useMemo(function () {\n    // Convert `locale` to `locales`.\n    if (locale) {\n      locales = [locale];\n    } // `javascript-time-ago` default locale.\n\n\n    return locales.concat(JavascriptTimeAgo.getDefaultLocale());\n  }, [locale, locales]); // Create `javascript-time-ago` formatter instance.\n\n  var timeAgo = useMemo(function () {\n    return new JavascriptTimeAgo(preferredLocales);\n  }, [preferredLocales]); // Create verbose date formatter for the tooltip text.\n  // (only on client side, because tooltips aren't rendered until triggered)\n\n  var verboseDateFormatter = useMemo(function () {\n    if (typeof window !== 'undefined') {\n      return createVerboseDateFormatter(preferredLocales, verboseDateFormat);\n    }\n  }, [preferredLocales, verboseDateFormat]);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      unusedState = _useState2[0],\n      setUnusedState = _useState2[1];\n\n  var forceUpdate = useCallback(function () {\n    return setUnusedState({});\n  }, [setUnusedState]);\n  var autoUpdateTimer = useRef();\n  var getNextAutoUpdateDelay = useCallback(function () {\n    // \"Smart\" autoupdate intervals are only used for standard time styles.\n    if ((typeof timeStyle === 'undefined' ? 'undefined' : _typeof(timeStyle)) === 'object') {\n      return updateInterval;\n    }\n\n    var time = getTime(date);\n    var now = Date.now();\n    var diff = Math.abs(now - time);\n\n    var _interval = void 0;\n\n    for (var _iterator = INTERVALS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref2 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref2 = _i.value;\n      }\n\n      var _ref3 = _ref2,\n          interval = _ref3.interval,\n          threshold = _ref3.threshold;\n\n      if (threshold && diff < threshold) {\n        continue;\n      }\n\n      _interval = interval;\n    }\n\n    return Math.min(_interval, SET_TIMEOUT_MAX_DELAY);\n  }, [date, timeStyle, updateInterval]);\n  var scheduleNextTick = useCallback(function () {\n    // Register for the relative time autoupdate as the time goes by.\n    autoUpdateTimer.current = setTimeout(function () {\n      forceUpdate();\n      scheduleNextTick();\n    }, getNextAutoUpdateDelay());\n  }, [forceUpdate, getNextAutoUpdateDelay]); // Verbose date string.\n  // Is used as a tooltip text.\n  //\n  // E.g. \"Sunday, May 18th, 2012, 18:45\"\n  //\n\n  var getVerboseDate = useCallback(function (input) {\n    var date = convertToDate(input);\n\n    if (formatVerboseDate) {\n      return formatVerboseDate(date);\n    }\n\n    return verboseDateFormatter(date);\n  }, [formatVerboseDate, verboseDateFormatter]);\n  var isMounted = useRef();\n  useEffect(function () {\n    isMounted.current = true; // If time label autoupdates are enabled.\n\n    if (tick) {\n      scheduleNextTick();\n    }\n\n    return function () {\n      clearTimeout(autoUpdateTimer.current);\n    };\n  }, []); // The date or timestamp that was passed.\n  // Convert timestamp to `Date`.\n\n  date = getDate(date); // Format verbose date for the tooltip.\n  // (only on client side, because tooltips aren't rendered until triggered)\n\n  var verboseDate = typeof window === 'undefined' ? undefined : getVerboseDate(date);\n  var timeElement = React.createElement('time', _extends({\n    dateTime: date.toISOString(),\n    title: tooltip ? verboseDate : undefined\n  }, rest), timeAgo.format(date, timeStyle));\n\n  if (container) {\n    return React.createElement(container, _extends({\n      verboseDate: verboseDate\n    }, rest), timeElement);\n  }\n\n  return timeElement;\n}\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: PropTypes.string,\n  // Preferred locales (ordered).\n  // Will choose the first suitable locale from this list.\n  // (the one that has been initialized)\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: PropTypes.arrayOf(PropTypes.string),\n  // Date/time formatting style.\n  // E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\n  timeStyle: style,\n  // Whether HTML `tooltip` attribute should be set\n  // to verbosely formatted date (is `true` by default).\n  // Set to `false` to disable the native HTML `tooltip`.\n  tooltip: PropTypes.bool.isRequired,\n  // An optional function returning what will be output in the HTML `title` tooltip attribute.\n  // (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\n  formatVerboseDate: PropTypes.func,\n  // `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\n  // Is used when `formatVerboseDate` is not specified.\n  // By default outputs a verbose date.\n  verboseDateFormat: PropTypes.object,\n  // How often to update all `<ReactTimeAgo/>` elements on a page.\n  // (is once in a minute by default)\n  // This setting is only used for \"custom\" `timeStyle`s.\n  // For standard `timeStyle`s, \"smart\" autoupdate interval is used:\n  // every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\n  updateInterval: PropTypes.number,\n  // Set to `false` to disable automatic refresh of\n  // `<ReactTimeAgo/>` elements on a page as time goes by.\n  // (is `true` by default)\n  tick: PropTypes.bool,\n  // React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  //\n  // ```js\n  // import React from 'react'\n  // import ReactTimeAgo from 'react-time-ago'\n  // import { Tooltip } from 'react-responsive-ui'\n  // \n  // export default function TimeAgo(props) {\n  //   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\n  // }\n  // \n  // const Container = ({ verboseDate, children }) => (\n  //   <Tooltip content={verboseDate}>\n  //     {children}\n  //   </Tooltip>\n  // )\n  // ```\n  //\n  container: PropTypes.func\n};\nReactTimeAgo.defaultProps = {\n  // No preferred locales.\n  locales: [],\n  // Show verbose date `title` tooltip on mouse over.\n  tooltip: true,\n  // Thursday, December 20, 2012, 7:00:00 AM GMT+4\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit' // timeZoneName : 'short'\n\n  },\n  // Updates once a minute\n  updateInterval: MINUTE,\n  // Refreshes time in a web browser by default\n  tick: true // Converts argument into a `Date`.\n\n};\n\nfunction convertToDate(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return input;\n  }\n\n  if (typeof input === 'number') {\n    return new Date(input);\n  }\n\n  throw new Error('Unsupported react-time-ago input: ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input)) + ', ' + input);\n}","map":{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["MINUTE","HOUR","DAY","MONTH","YEAR","INTERVALS","interval","threshold","SET_TIMEOUT_MAX_DELAY","date","timeStyle","tooltip","container","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","rest","preferredLocales","JavascriptTimeAgo","timeAgo","verboseDateFormatter","createVerboseDateFormatter","unusedState","setUnusedState","useState","forceUpdate","autoUpdateTimer","useRef","getNextAutoUpdateDelay","time","getTime","now","Date","diff","Math","_interval","scheduleNextTick","getVerboseDate","convertToDate","isMounted","useEffect","clearTimeout","getDate","verboseDate","timeElement","undefined","ReactTimeAgo","PropTypes","func","weekday","day","month","year","hour","minute","second","input","isMockedDate"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport JavascriptTimeAgo from 'javascript-time-ago'\r\nimport { style } from 'javascript-time-ago/prop-types'\r\n\r\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter'\r\nimport { getDate, getTime, isMockedDate } from './helpers/date'\r\n\r\nconst MINUTE = 60 * 1000\r\nconst HOUR = 60 * MINUTE\r\nconst DAY = 24 * HOUR\r\nconst MONTH = 30 * DAY\r\nconst YEAR = 365 * DAY\r\n\r\n// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n// \"Smart\" autoupdate intervals should be moved to `javascript-time-ago`'s grading scale.\r\nconst INTERVALS = [{\r\n\tinterval: MINUTE\r\n}, {\r\n\tthreshold: HOUR,\r\n\tinterval: 10 * MINUTE\r\n}, {\r\n\tthreshold: 12 * HOUR,\r\n\tinterval: 20 * MINUTE\r\n}, {\r\n\tthreshold: DAY,\r\n\tinterval: 3 * HOUR\r\n}, {\r\n\tthreshold: 7 * DAY,\r\n\tinterval: 6 * HOUR\r\n}, {\r\n\tthreshold: MONTH,\r\n\tinterval: 5 * DAY\r\n}, {\r\n\tthreshold: 3 * MONTH,\r\n\tinterval: 10 * DAY\r\n}, {\r\n\tthreshold: YEAR,\r\n\tinterval: MONTH\r\n}]\r\n\r\n// `setTimeout()` would enter an infinite cycle when interval is a `MONTH`.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_DELAY = 2147483647\r\n\r\nexport default function ReactTimeAgo({\r\n\tdate,\r\n\ttimeStyle,\r\n\ttooltip,\r\n\tcontainer,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\t...rest\r\n}) {\r\n\t// Composes a list of preferred locales\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(JavascriptTimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn new JavascriptTimeAgo(preferredLocales)\r\n\t}, [\r\n\t\tpreferredLocales\r\n\t])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\treturn createVerboseDateFormatter(preferredLocales, verboseDateFormat)\r\n\t\t}\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\tconst [unusedState, setUnusedState] = useState()\r\n\tconst forceUpdate = useCallback(() => setUnusedState({}), [setUnusedState])\r\n\r\n\tconst autoUpdateTimer = useRef()\r\n\r\n\tconst getNextAutoUpdateDelay = useCallback(() => {\r\n\t\t// \"Smart\" autoupdate intervals are only used for standard time styles.\r\n\t\tif (typeof timeStyle === 'object') {\r\n\t\t\treturn updateInterval\r\n\t\t}\r\n\t\tconst time = getTime(date)\r\n\t\tconst now = Date.now()\r\n\t\tconst diff = Math.abs(now - time)\r\n\t\tlet _interval\r\n\t\tfor (const { interval, threshold } of INTERVALS) {\r\n\t\t\tif (threshold && diff < threshold) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\t_interval = interval\r\n\t\t}\r\n\t\treturn Math.min(_interval, SET_TIMEOUT_MAX_DELAY)\r\n\t}, [\r\n\t\tdate, \r\n\t\ttimeStyle, \r\n\t\tupdateInterval\r\n\t])\r\n\r\n\tconst scheduleNextTick = useCallback(() => {\r\n\t\t// Register for the relative time autoupdate as the time goes by.\r\n\t\tautoUpdateTimer.current = setTimeout(() => {\r\n\t\t\tforceUpdate()\r\n\t\t\tscheduleNextTick()\r\n\t\t}, getNextAutoUpdateDelay())\r\n\t}, [\r\n\t\tforceUpdate,\r\n\t\tgetNextAutoUpdateDelay\r\n\t])\r\n\r\n\t// Verbose date string.\r\n\t// Is used as a tooltip text.\r\n\t//\r\n\t// E.g. \"Sunday, May 18th, 2012, 18:45\"\r\n\t//\r\n\tconst getVerboseDate = useCallback((input) => {\r\n\t\tconst date = convertToDate(input)\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(date)\r\n\t\t}\r\n\t\treturn verboseDateFormatter(date)\r\n\t}, [\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst isMounted = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tisMounted.current = true\r\n\t\t// If time label autoupdates are enabled.\r\n\t\tif (tick) {\r\n\t\t\tscheduleNextTick()\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(autoUpdateTimer.current)\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = getDate(date)\r\n\r\n\t// Format verbose date for the tooltip.\r\n\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\tconst verboseDate = typeof window === 'undefined' ? undefined : getVerboseDate(date)\r\n\r\n\tconst timeElement = (\r\n\t\t<time\r\n\t\t\tdateTime={date.toISOString()}\r\n\t\t\ttitle={tooltip ? verboseDate : undefined} \r\n\t\t\t{...rest}>\r\n\t\t\t{timeAgo.format(date, timeStyle)}\r\n\t\t</time>\r\n\t)\r\n\r\n\tif (container) {\r\n\t\treturn React.createElement(\r\n\t\t\tcontainer,\r\n\t\t\t{\r\n\t\t\t\tverboseDate,\r\n\t\t\t\t...rest\r\n\t\t\t},\r\n\t\t\ttimeElement\r\n\t\t)\r\n\t}\r\n\r\n\treturn timeElement\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Preferred locales (ordered).\r\n\t// Will choose the first suitable locale from this list.\r\n\t// (the one that has been initialized)\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// Date/time formatting style.\r\n\t// E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\r\n\ttimeStyle: style,\r\n\r\n\t// Whether HTML `tooltip` attribute should be set\r\n\t// to verbosely formatted date (is `true` by default).\r\n\t// Set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// An optional function returning what will be output in the HTML `title` tooltip attribute.\r\n\t// (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\r\n\t// Is used when `formatVerboseDate` is not specified.\r\n\t// By default outputs a verbose date.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// How often to update all `<ReactTimeAgo/>` elements on a page.\r\n\t// (is once in a minute by default)\r\n\t// This setting is only used for \"custom\" `timeStyle`s.\r\n\t// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n\t// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n\tupdateInterval: PropTypes.number,\r\n\r\n\t// Set to `false` to disable automatic refresh of\r\n\t// `<ReactTimeAgo/>` elements on a page as time goes by.\r\n\t// (is `true` by default)\r\n\ttick: PropTypes.bool,\r\n\r\n\t// React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t//\r\n\t// ```js\r\n\t// import React from 'react'\r\n\t// import ReactTimeAgo from 'react-time-ago'\r\n\t// import { Tooltip } from 'react-responsive-ui'\r\n\t// \r\n\t// export default function TimeAgo(props) {\r\n\t//   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\r\n\t// }\r\n\t// \r\n\t// const Container = ({ verboseDate, children }) => (\r\n\t//   <Tooltip content={verboseDate}>\r\n\t//     {children}\r\n\t//   </Tooltip>\r\n\t// )\r\n\t// ```\r\n\t//\r\n\tcontainer: PropTypes.func\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Show verbose date `title` tooltip on mouse over.\r\n\ttooltip: true,\r\n\r\n\t// Thursday, December 20, 2012, 7:00:00 AM GMT+4\r\n\tverboseDateFormat: {\r\n\t\tweekday      : 'long',\r\n\t\tday          : 'numeric',\r\n\t\tmonth        : 'long',\r\n\t\tyear         : 'numeric',\r\n\t\thour         : 'numeric',\r\n\t\tminute       : '2-digit',\r\n\t\tsecond       : '2-digit',\r\n\t\t// timeZoneName : 'short'\r\n\t},\r\n\r\n\t// Updates once a minute\r\n\tupdateInterval: MINUTE,\r\n\r\n\t// Refreshes time in a web browser by default\r\n\ttick: true\r\n}\r\n\r\n// Converts argument into a `Date`.\r\nfunction convertToDate(input) {\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input\r\n\t}\r\n\tif (typeof input === 'number') {\r\n\t\treturn new Date(input)\r\n\t}\r\n\tthrow new Error(`Unsupported react-time-ago input: ${typeof input}, ${input}`)\r\n}"]},"metadata":{},"sourceType":"module"}