{"ast":null,"code":"class WebSocketService {\n  static getInstance() {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n\n    return WebSocketService.instance;\n  }\n\n  constructor() {\n    this.callbacks = {};\n    this.socketRef = null;\n  }\n\n  connect(bugId, token) {\n    const path = \"ws://\" + 'localhost:8000' + '/ws/comment/' + bugId + '/' + token + '/';\n    this.socketRef = new WebSocket(path);\n\n    this.socketRef.onopen = () => {\n      console.log(\"WebSocket open\");\n    };\n\n    this.socketNewComment(JSON.stringify({\n      command: 'fetch_comments'\n    }));\n\n    this.socketRef.onmessage = e => {\n      this.socketNewComment(e.data);\n    };\n\n    this.socketRef.onerror = e => {\n      console.log(e.message);\n    };\n\n    this.socketRef.onclose = () => {\n      console.log(\"WebSocket closed let's reopen\");\n      this.connect(bugId, token);\n    };\n  }\n\n  disconnect() {\n    this.socketRef.close();\n  }\n\n  socketNewComment(data) {\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n\n    if (Object.keys(this.callbacks).length === 0) {\n      return;\n    }\n\n    if (command === \"comments\") {\n      this.callbacks[command](parsedData.comments);\n    }\n\n    if (command === \"new_comment\") {\n      this.callbacks[command](parsedData.comment);\n    }\n\n    if (command === \"like\") {\n      this.callbacks[command](parsedData.comment);\n    }\n  }\n\n  fetchComments() {\n    this.sendComment({\n      command: \"fetch_comments\"\n    });\n  }\n\n  newComment(comment) {\n    this.sendComment({\n      command: \"new_comment\",\n      reply: comment.reply,\n      description: comment.description\n    });\n  }\n\n  likeComment(id, status) {\n    this.sendComment({\n      command: \"like_comment\",\n      commentId: id,\n      status\n    });\n  }\n\n  addCallbacks(commentsCallback, newCommentCallback, likeCommentCallback) {\n    this.callbacks[\"comments\"] = commentsCallback;\n    this.callbacks[\"new_comment\"] = newCommentCallback;\n    this.callbacks[\"like\"] = likeCommentCallback;\n  }\n\n  sendComment(data) {\n    try {\n      this.socketRef.send(JSON.stringify({ ...data\n      }));\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.socketRef.readyState;\n  }\n\n}\n\nWebSocketService.instance = null;\nconst WebSocketInstance = WebSocketService.getInstance();\nexport default WebSocketInstance;","map":{"version":3,"sources":["/home/gauransh/Documents/assignments/prakhar/bugrep/frontend/src/websocket.js"],"names":["WebSocketService","getInstance","instance","constructor","callbacks","socketRef","connect","bugId","token","path","WebSocket","onopen","console","log","socketNewComment","JSON","stringify","command","onmessage","e","data","onerror","message","onclose","disconnect","close","parsedData","parse","Object","keys","length","comments","comment","fetchComments","sendComment","newComment","reply","description","likeComment","id","status","commentId","addCallbacks","commentsCallback","newCommentCallback","likeCommentCallback","send","err","state","readyState","WebSocketInstance"],"mappings":"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","sourcesContent":["class WebSocketService {\n    static instance = null;\n    callbacks = {};\n\n    static getInstance() {\n        if (!WebSocketService.instance) {\n            WebSocketService.instance = new WebSocketService();\n        }\n        return WebSocketService.instance;\n    }\n\n    constructor() {\n        this.socketRef = null;\n    }\n\n    connect(bugId, token) {\n        const path = \"ws://\"+'localhost:8000'+'/ws/comment/'+bugId+'/'+token+'/';\n        this.socketRef = new WebSocket(path);\n        this.socketRef.onopen = () => {\n            console.log(\"WebSocket open\");\n        };\n        this.socketNewComment(JSON.stringify({\n            command: 'fetch_comments'\n        }))\n        this.socketRef.onmessage  = e => {\n            this.socketNewComment(e.data);\n        };\n        this.socketRef.onerror = e => {\n            console.log(e.message);\n        };\n        this.socketRef.onclose = () => {\n            console.log(\"WebSocket closed let's reopen\");\n            this.connect(bugId, token);\n        };\n    }\n\n    disconnect() {\n        this.socketRef.close();\n    }\n\n    socketNewComment(data) {\n        const parsedData = JSON.parse(data);\n        const command = parsedData.command;\n        if (Object.keys(this.callbacks).length === 0) {\n            return;\n        }\n        if (command === \"comments\") {\n            this.callbacks[command](parsedData.comments);\n        }\n        if (command === \"new_comment\") {\n            this.callbacks[command](parsedData.comment);\n        }\n        if (command === \"like\") {\n            this.callbacks[command](parsedData.comment);\n        }\n    }\n\n    fetchComments() {\n        this.sendComment({\n            command: \"fetch_comments\"\n        });\n    }\n\n    newComment(comment) {\n        this.sendComment({\n            command: \"new_comment\",\n            reply: comment.reply,\n            description: comment.description\n        });\n    }\n\n    likeComment(id, status) {\n        this.sendComment({\n            command: \"like_comment\",\n            commentId: id,\n            status\n        });\n    }\n\n    addCallbacks(commentsCallback, newCommentCallback, likeCommentCallback) {\n        this.callbacks[\"comments\"] = commentsCallback;\n        this.callbacks[\"new_comment\"] = newCommentCallback;\n        this.callbacks[\"like\"] = likeCommentCallback;\n    }\n\n    sendComment(data) {\n        try {\n            this.socketRef.send(JSON.stringify({ ...data }));\n        } catch (err) {\n            console.log(err.message);\n        }\n    }\n\n    state() {\n        return this.socketRef.readyState;\n    }\n}\n\nconst WebSocketInstance = WebSocketService.getInstance();\n\nexport default WebSocketInstance;"]},"metadata":{},"sourceType":"module"}